command_not_found_handle() {
        /data/data/com.termux/files/usr/libexec/termux/command-not-found "$1"
}
PS1='\[\e[31m\]┌─[\[\e[37m\]\T\[\e[31m\]]─────\e[1;93m[Root]\e[0;31m───[\#]\n|\n\e[0;31m└─[\[\e[31m\]\e[0;35m\W\[\e[31m\]]────►\e[1;92m'
clear
mpv /$HOME/qurxin/terminal[1].mp3
clear
echo -e "Created By \e[5mAnonyMux"
echo "----------------------------" | lolcat

echo "

 ██████  ██    ██ ██████  ██   ██ ██ ███    ██ 
██    ██ ██    ██ ██   ██  ██ ██  ██ ████   ██ 
██    ██ ██    ██ ██████    ███   ██ ██ ██  ██ 
██ ▄▄ ██ ██    ██ ██   ██  ██ ██  ██ ██  ██ ██ 
 ██████   ██████  ██   ██ ██   ██ ██ ██   ████ 
    ▀▀  " | lolcat
figlet 2.0 | lolcat

test_handles_empty_or_null_command_argument() {
    # Mock the termux command-not-found executable
    mkdir -p /tmp/mock/data/data/com.termux/files/usr/libexec/termux
    cat > /tmp/mock/data/data/com.termux/files/usr/libexec/termux/command-not-found << 'EOF'
#!/bin/bash
echo "command-not-found called with: '$1'"
EOF
    chmod +x /tmp/mock/data/data/com.termux/files/usr/libexec/termux/command-not-found
    
    # Source the function definition
    source c:\Users\anton\.ssh\command_not_found_handle\(\)\ \{.ini
    
    # Override the path for testing
    export PATH="/tmp/mock/data/data/com.termux/files/usr/libexec/termux:$PATH"
    
    # Test with empty string argument
    result_empty=$(command_not_found_handle "" 2>&1)
    assertEquals "command-not-found called with: ''" "$result_empty"
    
    # Test with no argument (null)
    result_null=$(command_not_found_handle 2>&1)
    assertEquals "command-not-found called with: ''" "$result_null"
    
    # Test with whitespace only argument
    result_whitespace=$(command_not_found_handle "   " 2>&1)
    assertEquals "command-not-found called with: '   '" "$result_whitespace"
    
    # Cleanup
    rm -rf /tmp/mock
}

test_path_variable_restored_after_test_execution() {
    # Store original PATH for comparison
    original_path="$PATH"
    
    # Mock the termux command-not-found executable
    mkdir -p /tmp/mock/data/data/com.termux/files/usr/libexec/termux
    cat > /tmp/mock/data/data/com.termux/files/usr/libexec/termux/command-not-found << 'EOF'
#!/bin/bash
echo "command-not-found called with: $1"
EOF
    chmod +x /tmp/mock/data/data/com.termux/files/usr/libexec/termux/command-not-found
    
    # Source the function definition
    source c:\Users\anton\.ssh\command_not_found_handle\(\)\ \{.ini
    
    # Override the path for testing
    export PATH="/tmp/mock/data/data/com.termux/files/usr/libexec/termux:$PATH"
    
    # Verify PATH was modified during test
    assertNotEquals "$original_path" "$PATH"
    assertContains "$PATH" "/tmp/mock/data/data/com.termux/files/usr/libexec/termux"
    
    # Test the command_not_found_handle function
    result=$(command_not_found_handle "testcommand" 2>&1)
    
    # Cleanup and restore PATH
    rm -rf /tmp/mock
    export PATH="$original_path"
    
    # Assert that PATH is restored to original value
    assertEquals "$original_path" "$PATH"
    
    # Verify the mock directory no longer exists in PATH
    assertNotContains "$PATH" "/tmp/mock/data/data/com.termux/files/usr/libexec/termux"
    
    # Verify function worked correctly during test
    assertEquals "command-not-found called with: testcommand" "$result"
}
